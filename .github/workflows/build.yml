name: build

on:
  create:
    tags:
      - v*
  push:
    branches:
      - main
  pull_request:
  schedule:
    # At 00:00 on Monday
    - cron: '0 0 * * 1'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: test - python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    permissions:
      contents: read

    strategy:
      fail-fast: false
      matrix:
        python-version:
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'

    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

      - name: Install Poetry
        run: pipx install "$(<poetry-requirements.txt)"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@5ccb29d8773c3f3f653e1705f474dfaa8a06a912 # v4.4.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: poetry

      - name: Set up Mattermost instance
        run: tests/scripts/setup-mattermost.sh

      - name: Install dependencies
        run: poetry install --verbose

      - name: Run tests
        run: >-
          poetry run pytest
          --color=yes
          --cov
          --cov-report=xml:coverage-reports/coverage-${{ matrix.python-version }}.xml

      - name: Archive coverage report
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: coverage-reports
          path: coverage-reports/coverage-${{ matrix.python-version }}.xml

  lint:
    name: lint - python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    permissions:
      contents: read

    strategy:
      fail-fast: false
      matrix:
        python-version:
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'

    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@5ccb29d8773c3f3f653e1705f474dfaa8a06a912 # v4.4.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: pre-commit-requirements.txt

      - name: Set up pre-commit
        run: pip install -r pre-commit-requirements.txt

      - name: Set up pre-commit cache
        uses: actions/cache@4723a57e26efda3a62cbde1812113b730952852d # v3.2.2
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ env.pythonLocation }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit
        run: pre-commit run --show-diff-on-failure --color=always --all-files

  sonar-scan:
    name: sonar scan
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read

    timeout-minutes: 15

    steps:
      # Full checkout for SonarQube
      - name: Checkout
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0

      - name: Download coverage reports
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: coverage-reports
          path: coverage-reports/

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@cb201f3b2d7a38231a8c042dfea4539c8bea180b # v1.8
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  publish:
    name: publish
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    needs: [lint, test, sonar-scan]
    runs-on: ubuntu-latest
    permissions:
      contents: read

    timeout-minutes: 15

    env:
      PYTHON_VERSION: '3.11'

    steps:
      - name: Checkout
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

      - name: Install Poetry
        run: pipx install "$(<poetry-requirements.txt)"

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@5ccb29d8773c3f3f653e1705f474dfaa8a06a912 # v4.4.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: poetry

      - name: Build
        run: poetry build

      - name: Publish to PyPi
        run: poetry publish
        env:
          POETRY_HTTP_BASIC_PYPI_USERNAME: __token__
          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}
