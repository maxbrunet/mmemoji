name: build

on:
  create:
    tags:
      - v*
  push:
    branches:
      - main
  pull_request:
  schedule:
    # At 00:00 on Monday
    - cron: '0 0 * * 1'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: test - python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    permissions:
      contents: read

    strategy:
      fail-fast: false
      matrix:
        python-version:
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'

    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0

      - name: Install Poetry
        run: pipx install "$(<poetry-requirements.txt)"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@2c3dd9e7e29afd70cc0950079bde6c979d1f69f9 # v4.3.1
        with:
          python-version: ${{ matrix.python-version }}
          cache: poetry

      - name: Set up Mattermost instance
        run: tests/scripts/setup-mattermost.sh

      - name: Install dependencies
        run: poetry install --verbose

      - name: Run tests
        run: >-
          poetry run pytest
          --color=yes
          --cov
          --cov-report=xml:coverage-reports/coverage-${{ matrix.python-version }}.xml

      - name: Archive coverage report
        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb # tag=v3.1.1
        with:
          name: coverage-reports
          path: coverage-reports/coverage-${{ matrix.python-version }}.xml

  lint:
    name: lint - python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    permissions:
      contents: read

    strategy:
      fail-fast: false
      matrix:
        python-version:
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'

    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@2c3dd9e7e29afd70cc0950079bde6c979d1f69f9 # v4.3.1
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: pre-commit-requirements.txt

      - name: Set up pre-commit
        run: pip install -r pre-commit-requirements.txt

      - name: Set up pre-commit cache
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7 # tag=v3.0.11
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ env.pythonLocation }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit
        run: pre-commit run --show-diff-on-failure --color=always --all-files

  sonar-scan:
    name: sonar scan
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read

    timeout-minutes: 15

    steps:
      # Full checkout for SonarQube
      - name: Checkout
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0
        with:
          fetch-depth: 0

      - name: Download coverage reports
        uses: actions/download-artifact@9782bd6a9848b53b110e712e20e42d89988822b7 # tag=v3.0.1
        with:
          name: coverage-reports
          path: coverage-reports/

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@cb201f3b2d7a38231a8c042dfea4539c8bea180b # v1.8
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  publish:
    name: publish
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    needs: [lint, test, sonar-scan]
    runs-on: ubuntu-latest
    permissions:
      contents: read

    timeout-minutes: 15

    env:
      PYTHON_VERSION: '3.11'

    steps:
      - name: Checkout
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0

      - name: Install Poetry
        run: pipx install "$(<poetry-requirements.txt)"

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@2c3dd9e7e29afd70cc0950079bde6c979d1f69f9 # v4.3.1
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: poetry

      - name: Build
        run: poetry build

      - name: Publish to PyPi
        run: poetry publish
        env:
          POETRY_HTTP_BASIC_PYPI_USERNAME: __token__
          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}
